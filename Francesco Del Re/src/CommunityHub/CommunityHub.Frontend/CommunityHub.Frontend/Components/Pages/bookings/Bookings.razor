@page "/bookings"
@using CommunityHub.Application.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Bookings</h3>

<div class="position-relative">
    @if (isLoading)
    {
        <div class="loading-overlay">
            <p>Loading...</p>
        </div>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Attendee</th>
                <th>Booking Date</th>
            </tr>
        </thead>
        <tbody>
            @if (bookings.Any())
            {
                @foreach (var booking in bookings)
                {
                    <tr>
                        <td>@booking.Webinar!.Title</td>
                        <td>@booking.Webinar!.StartDate</td>
                        <td>@booking.Webinar!.EndDate</td>
                        <td>@booking.User!.Name</td>
                        <td>@booking.BookingDate</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5" class="text-center">No bookings available</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<button class="btn btn-primary" @onclick="NavigateToCreateBooking">Create New Booking</button>

<style>
    .loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(255, 255, 255, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10;
    font-size: 1.5rem;
    color: #007bff;
    font-weight: bold;
    border-radius: 0.25rem;
    }

    .position-relative {
    position: relative;
    }
</style>

@code {
    private List<BookingDto> bookings = new List<BookingDto>();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadBookings();
    }

    private async Task LoadBookings()
    {
        isLoading = true;
        try
        {
            bookings = await Http.GetFromJsonAsync<List<BookingDto>>("booking") ?? [];
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");

            bookings = []; // Assicura che la lista venga comunque visualizzata come vuota in caso di errore
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToCreateBooking()
    {
        Navigation.NavigateTo("/createbooking");
    }
}