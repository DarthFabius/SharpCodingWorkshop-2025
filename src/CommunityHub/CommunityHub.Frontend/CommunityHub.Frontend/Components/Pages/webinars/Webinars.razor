@page "/webinars"
@using CommunityHub.Application.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Webinars</h3>

<div class="position-relative">
    @if (isLoading)
    {
        <div class="loading-overlay">
            <p>Loading...</p>
        </div>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @if (webinars.Any())
            {
                @foreach (var webinar in webinars)
                {
                    <tr>
                        <td>
                            <NavLink href="@GetWebinarUrl(webinar.Id)">@webinar.Title</NavLink>
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => NavigateToCreate()">Edit</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="2" class="text-center">No webinars available</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<button class="btn btn-primary" @onclick="NavigateToCreate">Create New Webinar</button>

<style>
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10;
        font-size: 1.5rem;
        color: #007bff;
        font-weight: bold;
        border-radius: 0.25rem;
    }

    .position-relative {
        position: relative;
    }
</style>

@code {
    private List<WebinarDto> webinars = new List<WebinarDto>();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadWebinars();
    }

    private async Task LoadWebinars()
    {
        isLoading = true;
        try
        {
            var response = await Http.GetFromJsonAsync<List<WebinarDto>>("api/webinar");
            webinars = response ?? new List<WebinarDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            webinars = new List<WebinarDto>(); // Assicura che la lista venga comunque visualizzata come vuota in caso di errore
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/createwebinar");
    }

    private string GetWebinarUrl(Guid webinarId)
    {
        return $"/webinar/{webinarId}";
    }
}
